{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48],"program":"/Users/hyungsukkang/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","rand_core","/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"std\"","-C","metadata=026807c20923c7c4","-C","extra-filename=-026807c20923c7c4","--out-dir","/Users/hyungsukkang/Documents/GitHub/nyc-blockchain-workshop/Topic1/01_simple_web_server/target/rls/debug/deps","-L","dependency=/Users/hyungsukkang/Documents/GitHub/nyc-blockchain-workshop/Topic1/01_simple_web_server/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/hyungsukkang/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,68,111,99,117,109,101,110,116,115,47,71,105,116,72,117,98,47,110,121,99,45,98,108,111,99,107,99,104,97,105,110,45,119,111,114,107,115,104,111,112,47,84,111,112,105,99,49,47,48,49,95,115,105,109,112,108,101,95,119,101,98,95,115,101,114,118,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,114,97,110,100,95,99,111,114,101,45,48,50,54,56,48,55,99,50,48,57,50,51,99,55,99,52,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"rand_core","disambiguator":[14894923232071142826,17762959503454691804]},"crate_root":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src","external_crates":[{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[11123849904501506850,12592230125225897637]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10514818907800005255,15617935135795761710]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10694050026428603948,16364048786886383650]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7270295153578412593,14809769592821685577]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15606415273066340889,98631239347952708]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15208952802642491078,8956020719500564174]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":7,"id":{"name":"rustc_demangle","disambiguator":[6113559071397442692,3854898945721356298]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":8,"id":{"name":"unwind","disambiguator":[7512080615501521792,12589326239803403465]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":9,"id":{"name":"backtrace_sys","disambiguator":[13659034324299537912,3636116634523606967]}},{"file_name":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[18379378742537499941,5998065604195486106]}}],"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":408,"byte_end":18940,"line_start":10,"line_end":477,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":254},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2029,"byte_end":2038,"line_start":53,"line_end":53,"column_start":17,"column_end":26},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":274},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2040,"byte_end":2045,"line_start":53,"line_end":53,"column_start":28,"column_end":33},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":408,"byte_end":18940,"line_start":10,"line_end":477,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":20},{"krate":0,"index":60},{"krate":0,"index":160},{"krate":0,"index":190},{"krate":0,"index":200},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":226},{"krate":0,"index":236},{"krate":0,"index":246},{"krate":0,"index":250},{"krate":0,"index":252}],"decl_id":null,"docs":" Random number generation traits","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1387,"byte_end":1409,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1410,"byte_end":1449,"line_start":35,"line_end":35,"column_start":1,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":75},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":19814,"byte_end":19825,"line_start":26,"line_end":26,"column_start":5,"column_end":16},"name":"Unavailable","qualname":"::error::ErrorKind::Unavailable","value":"ErrorKind::Unavailable","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Feature is not available; not recoverable.\n \n This is the most permanent failure type and implies the error cannot be\n resolved simply by retrying (e.g. the feature may not exist in this\n build of the application or on the current platform).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":77},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":20241,"byte_end":20251,"line_start":35,"line_end":35,"column_start":5,"column_end":15},"name":"Unexpected","qualname":"::error::ErrorKind::Unexpected","value":"ErrorKind::Unexpected","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" General failure; there may be a chance of recovery on retry.\n \n This is the catch-all kind for errors from known and unknown sources\n which do not have a more specific kind / handling method.\n \n It is suggested to retry a couple of times or retry later when\n handling; some error sources may be able to resolve themselves,\n although this is not likely.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":79},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":20497,"byte_end":20506,"line_start":40,"line_end":40,"column_start":5,"column_end":14},"name":"Transient","qualname":"::error::ErrorKind::Transient","value":"ErrorKind::Transient","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" A transient failure which likely can be resolved or worked around.\n \n This error kind exists for a few specific cases where it is known that\n the error likely can be resolved internally, but is reported anyway.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":81},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":20861,"byte_end":20869,"line_start":47,"line_end":47,"column_start":5,"column_end":13},"name":"NotReady","qualname":"::error::ErrorKind::NotReady","value":"ErrorKind::NotReady","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Not ready yet: recommended to try again a little later.\n \n This error kind implies the generator needs more time or needs some\n other part of the application to do something else first before it is\n ready for use; for example this may be used by external generators\n which require time for initialization.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":83},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":20894,"byte_end":20909,"line_start":49,"line_end":49,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":254},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":19520,"byte_end":19529,"line_start":20,"line_end":20,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"ErrorKind::{Unavailable, Unexpected, Transient, NotReady, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":83}],"decl_id":null,"docs":" Error kind which can be matched over.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":19511,"byte_end":20912,"line_start":20,"line_end":50,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":19511,"byte_end":20912,"line_start":20,"line_end":50,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":21049,"byte_end":21061,"line_start":56,"line_end":56,"column_start":12,"column_end":24},"name":"should_retry","qualname":"<ErrorKind>::should_retry","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if this kind of error may resolve itself on retry.\n \n See also `should_wait()`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":21252,"byte_end":21263,"line_start":63,"line_end":63,"column_start":12,"column_end":23},"name":"should_wait","qualname":"<ErrorKind>::should_wait","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" True if we should retry but wait before retrying\n \n This implies `should_retry()` is true.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":21379,"byte_end":21390,"line_start":68,"line_end":68,"column_start":12,"column_end":23},"name":"description","qualname":"<ErrorKind>::description","value":"fn (self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" A description of this error kind\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":274},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":22258,"byte_end":22263,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error { kind, msg }","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89}],"decl_id":null,"docs":" Error type of random number generators\n \n This is a relatively simple error type, designed for compatibility with and\n without the Rust `std` library. It embeds a \"kind\" code, a message (static\n string only), and an optional chained cause (`std` only). The `kind` and\n `msg` fields can be accessed directly; cause can be accessed via\n `std::error::Error::cause` or `Error::take_cause`. Construction can only be\n done via `Error::new` or `Error::with_cause`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":85},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":22297,"byte_end":22301,"line_start":91,"line_end":91,"column_start":9,"column_end":13},"name":"kind","qualname":"::error::Error::kind","value":"error::ErrorKind","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The error kind\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":87},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":22348,"byte_end":22351,"line_start":93,"line_end":93,"column_start":9,"column_end":12},"name":"msg","qualname":"::error::Error::msg","value":"&'static str","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The error message\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":22534,"byte_end":22537,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn (kind: ErrorKind, msg: &'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, with specified kind and a message.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":23232,"byte_end":23242,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"with_cause","qualname":"<Error>::with_cause","value":"fn <E> (kind: ErrorKind, msg: &'static str, cause: E) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new instance, with specified kind, message, and a\n chained cause.\n \n Note: `stdError` is an alias for `std::error::Error`.\n \n If not targetting `std` (i.e. `no_std`), this function is replaced by\n another with the same prototype, except that there are no bounds on the\n type `E` (because both `Box` and `stdError` are unavailable), and the\n `cause` is ignored.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":23199,"byte_end":23220,"line_start":118,"line_end":118,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":23904,"byte_end":23914,"line_start":137,"line_end":137,"column_start":12,"column_end":22},"name":"take_cause","qualname":"<Error>::take_cause","value":"fn (&mut self) -> Option<Box<stdError + Send + Sync>>","parent":null,"children":[],"decl_id":null,"docs":" Take the cause, if any. This allows the embedded cause to be extracted.\n This uses `Option::take`, leaving `self` with no cause.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":23871,"byte_end":23892,"line_start":136,"line_end":136,"column_start":5,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/block.rs","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":76},{"krate":0,"index":82},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":104},{"krate":0,"index":114},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":124},{"krate":0,"index":128},{"krate":0,"index":138},{"krate":0,"index":148},{"krate":0,"index":158}],"decl_id":null,"docs":" The `BlockRngCore` trait and implementation helpers","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":27204,"byte_end":27216,"line_start":63,"line_end":63,"column_start":11,"column_end":23},"name":"BlockRngCore","qualname":"::block::BlockRngCore","value":"BlockRngCore","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88}],"decl_id":null,"docs":" A trait for RNGs which do not generate random numbers individually, but in\n blocks (typically `[u32; N]`). This technique is commonly used by\n cryptographic RNGs to improve performance.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":27270,"byte_end":27274,"line_start":65,"line_end":65,"column_start":10,"column_end":14},"name":"Item","qualname":"::block::BlockRngCore::Item","value":"type Item;","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Results element type, e.g. `u32`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":27431,"byte_end":27438,"line_start":69,"line_end":69,"column_start":10,"column_end":17},"name":"Results","qualname":"::block::BlockRngCore::Results","value":"type Results: AsRef<[Self::Item]> + AsMut<[Self::Item]> + Default;","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Results type. This is the 'block' an RNG implementing `BlockRngCore`\n generates, which will usually be an array like `[u32; 16]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":27542,"byte_end":27550,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"generate","qualname":"::block::BlockRngCore::generate","value":"fn (&mut self, results: &mut Self::Results) -> ()","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Generate a new block of results.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":280},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":29567,"byte_end":29575,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"BlockRng","qualname":"::block::BlockRng","value":"BlockRng { core }","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":97},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":29729,"byte_end":29733,"line_start":117,"line_end":117,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng::core","value":"R","parent":{"krate":0,"index":280},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":30329,"byte_end":30332,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng<R>>::new","value":"fn (core: R) -> BlockRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":30785,"byte_end":30790,"line_start":148,"line_end":148,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng<R>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":30967,"byte_end":30972,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":31151,"byte_end":31167,"line_start":160,"line_end":160,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng<R>>::generate_and_set","value":"fn (&mut self, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":286},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":36583,"byte_end":36593,"line_start":317,"line_end":317,"column_start":12,"column_end":22},"name":"BlockRng64","qualname":"::block::BlockRng64","value":"BlockRng64 { core }","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":109}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":109},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":36820,"byte_end":36824,"line_start":322,"line_end":322,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng64::core","value":"R","parent":{"krate":0,"index":286},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":37474,"byte_end":37477,"line_start":340,"line_end":340,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng64<R>>::new","value":"fn (core: R) -> BlockRng64<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":37964,"byte_end":37969,"line_start":355,"line_end":355,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng64<R>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":38146,"byte_end":38151,"line_start":361,"line_end":361,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng64<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":38362,"byte_end":38378,"line_start":368,"line_end":368,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng64<R>>::generate_and_set","value":"fn (&mut self, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":160},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,105,109,112,108,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"impls","qualname":"::impls","value":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/impls.rs","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188}],"decl_id":null,"docs":" Helper functions for implementing `RngCore` functions.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,105,109,112,108,115,46,114,115],"byte_start":43768,"byte_end":43784,"line_start":29,"line_end":29,"column_start":8,"column_end":24},"name":"next_u64_via_u32","qualname":"::impls::next_u64_via_u32","value":"fn <R> (rng: &mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `next_u32`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,105,109,112,108,115,46,114,115],"byte_start":44331,"byte_end":44350,"line_start":42,"line_end":42,"column_start":8,"column_end":27},"name":"fill_bytes_via_next","qualname":"::impls::fill_bytes_via_next","value":"fn <R> (rng: &mut R, dest: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":182},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,105,109,112,108,115,46,114,115],"byte_start":47211,"byte_end":47230,"line_start":137,"line_end":137,"column_start":8,"column_end":27},"name":"fill_via_u32_chunks","qualname":"::impls::fill_via_u32_chunks","value":"fn (src: &[u32], dest: &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,105,109,112,108,115,46,114,115],"byte_start":47756,"byte_end":47775,"line_start":151,"line_end":151,"column_start":8,"column_end":27},"name":"fill_via_u64_chunks","qualname":"::impls::fill_via_u64_chunks","value":"fn (src: &[u64], dest: &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":186},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,105,109,112,108,115,46,114,115],"byte_start":47940,"byte_end":47957,"line_start":156,"line_end":156,"column_start":8,"column_end":25},"name":"next_u32_via_fill","qualname":"::impls::next_u32_via_fill","value":"fn <R> (rng: &mut R) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u32` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":188},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,105,109,112,108,115,46,114,115],"byte_start":48113,"byte_end":48130,"line_start":161,"line_end":161,"column_start":8,"column_end":25},"name":"next_u64_via_fill","qualname":"::impls::next_u64_via_fill","value":"fn <R> (rng: &mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":190},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"le","qualname":"::le","value":"/Users/hyungsukkang/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.4.0/src/le.rs","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198}],"decl_id":null,"docs":" Little-Endian utilities\n \n Little-Endian order has been chosen for internal usage; this makes some\n useful functions available.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":196},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,101,46,114,115],"byte_start":49279,"byte_end":49292,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::le::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,101,46,114,115],"byte_start":49262,"byte_end":49271,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":198},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,101,46,114,115],"byte_start":49480,"byte_end":49493,"line_start":42,"line_end":42,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::le::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,101,46,114,115],"byte_start":49463,"byte_end":49472,"line_start":41,"line_end":41,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":200},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5295,"byte_end":5302,"line_start":138,"line_end":138,"column_start":11,"column_end":18},"name":"RngCore","qualname":"::RngCore","value":"RngCore","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208}],"decl_id":null,"docs":" The core of a random number generator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5611,"byte_end":5619,"line_start":145,"line_end":145,"column_start":8,"column_end":16},"name":"next_u32","qualname":"::RngCore::next_u32","value":"fn (&mut self) -> u32","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Return the next random `u32`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5957,"byte_end":5965,"line_start":153,"line_end":153,"column_start":8,"column_end":16},"name":"next_u64","qualname":"::RngCore::next_u64","value":"fn (&mut self) -> u64","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Return the next random `u64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6738,"byte_end":6748,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"fill_bytes","qualname":"::RngCore::fill_bytes","value":"fn (&mut self, dest: &mut [u8]) -> ()","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Fill `dest` with random data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7475,"byte_end":7489,"line_start":184,"line_end":184,"column_start":8,"column_end":22},"name":"try_fill_bytes","qualname":"::RngCore::try_fill_bytes","value":"fn (&mut self, dest: &mut [u8]) -> Result<(), Error>","parent":{"krate":0,"index":200},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random data.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":210},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8778,"byte_end":8787,"line_start":209,"line_end":209,"column_start":11,"column_end":20},"name":"CryptoRng","qualname":"::CryptoRng","value":"CryptoRng","parent":null,"children":[],"decl_id":null,"docs":" A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]\n implementation is supposed to be cryptographically secure.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":212},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9237,"byte_end":9248,"line_start":221,"line_end":221,"column_start":11,"column_end":22},"name":"SeedableRng","qualname":"::SeedableRng","value":"SeedableRng: Sized","parent":null,"children":[{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":224}],"decl_id":null,"docs":" A random number generator that can be explicitly seeded.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":214},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10766,"byte_end":10770,"line_start":267,"line_end":267,"column_start":10,"column_end":14},"name":"Seed","qualname":"::SeedableRng::Seed","value":"type Seed: Sized + Default + AsMut<[u8]>;","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":" Seed type, which is restricted to types mutably-dereferencable as `u8`\n arrays (we recommend `[u8; N]` for some `N`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12055,"byte_end":12064,"line_start":290,"line_end":290,"column_start":8,"column_end":17},"name":"from_seed","qualname":"::SeedableRng::from_seed","value":"fn (seed: Self::Seed) -> Self","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":" Create a new PRNG using the given seed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12881,"byte_end":12894,"line_start":306,"line_end":306,"column_start":8,"column_end":21},"name":"seed_from_u64","qualname":"::SeedableRng::seed_from_u64","value":"fn (mut state: u64) -> Self","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":" Create a new PRNG using a `u64` seed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15589,"byte_end":15597,"line_start":363,"line_end":363,"column_start":8,"column_end":16},"name":"from_rng","qualname":"::SeedableRng::from_rng","value":"fn <R> (mut rng: R) -> Result<Self, Error>","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":" Create a new PRNG seeded from another `Rng`.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":20919,"byte_end":20928,"line_start":52,"line_end":52,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":22449,"byte_end":22454,"line_start":98,"line_end":98,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":24024,"byte_end":24029,"line_start":142,"line_end":142,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":24432,"byte_end":24437,"line_start":155,"line_end":155,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":24660,"byte_end":24665,"line_start":166,"line_end":166,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":29870,"byte_end":29878,"line_start":121,"line_end":121,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":30174,"byte_end":30182,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":31377,"byte_end":31385,"line_start":167,"line_end":167,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":35054,"byte_end":35062,"line_start":275,"line_end":275,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":36961,"byte_end":36971,"line_start":326,"line_end":326,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":37317,"byte_end":37327,"line_start":337,"line_end":337,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":38620,"byte_end":38630,"line_start":376,"line_end":376,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":42206,"byte_end":42216,"line_start":483,"line_end":483,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":42588,"byte_end":42596,"line_start":499,"line_end":499,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16703,"byte_end":16706,"line_start":399,"line_end":399,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17196,"byte_end":17203,"line_start":422,"line_end":422,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17596,"byte_end":17599,"line_start":434,"line_end":434,"column_start":43,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2069,"byte_end":2074,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":60}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2084,"byte_end":2089,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":160}},{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2099,"byte_end":2101,"line_start":59,"line_end":59,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":190}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":20919,"byte_end":20928,"line_start":52,"line_end":52,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":254},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":22449,"byte_end":22454,"line_start":98,"line_end":98,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":24024,"byte_end":24029,"line_start":142,"line_end":142,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":274},"to":{"krate":2,"index":8404}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":24432,"byte_end":24437,"line_start":155,"line_end":155,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":274},"to":{"krate":1,"index":2466}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":24660,"byte_end":24665,"line_start":166,"line_end":166,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":1,"index":3830},"to":{"krate":2,"index":2634}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":29870,"byte_end":29878,"line_start":121,"line_end":121,"column_start":51,"column_end":59},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":280},"to":{"krate":2,"index":8400}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":30174,"byte_end":30182,"line_start":131,"line_end":131,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":31377,"byte_end":31385,"line_start":167,"line_end":167,"column_start":45,"column_end":53},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":280},"to":{"krate":0,"index":200}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":35054,"byte_end":35062,"line_start":275,"line_end":275,"column_start":53,"column_end":61},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":280},"to":{"krate":0,"index":212}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":36961,"byte_end":36971,"line_start":326,"line_end":326,"column_start":51,"column_end":61},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":286},"to":{"krate":2,"index":8400}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":37317,"byte_end":37327,"line_start":337,"line_end":337,"column_start":23,"column_end":33},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":38620,"byte_end":38630,"line_start":376,"line_end":376,"column_start":45,"column_end":55},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":286},"to":{"krate":0,"index":200}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":42206,"byte_end":42216,"line_start":483,"line_end":483,"column_start":53,"column_end":63},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":286},"to":{"krate":0,"index":212}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,98,108,111,99,107,46,114,115],"byte_start":42588,"byte_end":42596,"line_start":499,"line_end":499,"column_start":49,"column_end":57},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":280},"to":{"krate":0,"index":210}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9250,"byte_end":9255,"line_start":221,"line_end":221,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1686},"to":{"krate":0,"index":212}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16703,"byte_end":16706,"line_start":399,"line_end":399,"column_start":39,"column_end":42},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":5,"index":190},"to":{"krate":0,"index":200}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17196,"byte_end":17203,"line_start":422,"line_end":422,"column_start":24,"column_end":31},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":200},"to":{"krate":1,"index":4352}},{"span":{"file_name":[47,85,115,101,114,115,47,104,121,117,110,103,115,117,107,107,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,114,97,110,100,95,99,111,114,101,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17596,"byte_end":17599,"line_start":434,"line_end":434,"column_start":43,"column_end":46},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":5,"index":190},"to":{"krate":0,"index":210}}]}